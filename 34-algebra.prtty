.slide
    .vcenter
        .center
            .style[fg=$lowlight] << Part 2d
        .nl < .nl
        .style[bold]
            .center << Algebra

.slide
    .vcenter
        .quote[citation="Wikipedia"; altColor=$lowlight]
            Algebra is a branch of mathematics 
            .nl
            that deals with abstract systems

.slide
    .vcenter
        > (Abstract) algebra studies other mathematical phenomena
        > by representing them with simpler structures, 
        > operations, and associated laws.

.slide
    .vcenter
        For example, a 
        .style[bold] << monoid 
        consists of:
        .nl

        .wait
        .list[bullet="  "]
            A set 𝓢
            A binary operation 𝓢 ⨯ 𝓢 ⟶ 𝓢, denoted by *
        
        .wait
        .vspace[lines=2]
        > satisfying two axioms
        .wait
        .list[bullet="  "]
            Associativity: ∀𝘢,𝘣,𝘤 ∈ 𝓢, (𝘢 * 𝘣) * 𝘤 = 𝘢 * (𝘣 * 𝘤)
            Identity: ∃𝘦 ∈ 𝓢, ∀a ∈ 𝓢, 𝘢 * 𝘦 = 𝘦 * 𝘢 = 𝘢

        .wait
        .vspace[lines=2]
        > Examples of monoids:
        .list[bullet=$bullet]
            The set of integers ℤ with multiplication
            The set of integers ℤ with addition
            Strings with concatination
            Lists with concatination
            "..."


.slide
    .vcenter
        > Algebra has been very influential in computer science
        > and, to a lesser extent, in programming.
        .vspace[lines=2]

        .wait
        From group theory 
        .style[fg=$lowlight] << e.g., 
        monoids, semi-rings, lattices
        .nl
        .wait
        From category theory 
        .style[fg=$lowlight] << e.g., 
        functors, monads, arrows
        .nl
        .wait
        From type theory 
        .style[fg=$lowlight] << e.g., 
        dependent types
        .nl

        .wait
        .vspace[lines=2]
        > I don't want to talk about particular algebras.

        .wait
        .vspace[lines=2]
        I want to talk about an aspect of how algebra 
        .style[fg=$highlight] << works

.slide
    .vcenter
        "... or rather, algebra doesn't "
        .style[fg=$highlight] << work

        .wait
        .vspace[lines=2]
        algebra 
        .style[fg=$highlight] << is

        .wait
        .vspace[lines=3]
        You don't 
        .style[fg=$highlight] << use 
        a monad.
        .wait
        .nl
        Something is (or isn't) a monad based on its properties.

        .wait
        .vspace[lines=2]
        We can 
        .style[fg=$highlight] << recognise 
        that something is a monad.

        .wait
        .nl
        We can 
        .style[fg=$highlight] << change the structure 
        of something to make it a monad.

.slide
    .vcenter
        A lot of abstractions are like this in programming

        .wait
        .vspace[lines=2]
        We don't 
        .style[fg=$highlight] << use 
        them.
        .nl

        .wait
        We 
        .style[fg=$highlight] << recogise 
        them.

.slide
    .vcenter
        .type
            > type Filter = func(Product) bool

        .wait
        .vspace[lines=2]
        .type
            > func join(f1, f2 Filter) Filter {
            >     return func(p Product) {
            >         return f1(p) && f2(p)
            >     }
            > }

        .wait
        .vspace[lines=2]
        This is a monoid.

        .wait
        .vspace[lines=2]
        We haven't 
        .style[fg=$highlight] << used 
        a monoid.

        .wait
        .nl
        It just 
        .style[fg=$highlight] << is 
        one.

.slide
    .vcenter
        A lot of abstractions are like this in programming

        .vspace[lines=2]
        We don't 
        .style[fg=$highlight] << use 
        them.
        .nl

        We 
        .style[fg=$highlight] << recogise 
        them.

        .wait
        .vspace[lines=2]
        > Their value comes in how they reveal truths
        > about our code
        .wait
        > ...and in how the allow us to use different 
        > structures in the same way

.slide
    .vcenter
        > Programming with abstractions
        > is about understanding your code
        > and recognising patterns within it.

        .wait
        .vspace[lines=3]
        .style[fg=$highlight] << Good 
        abstractions come from 
        .nl
        recognising patterns that are
        .nl
        .style[fg=$highlight] << useful 
        in some way.