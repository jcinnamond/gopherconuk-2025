.waypoint[name=intro]
.slide
    .vcenter
        .center << .style [ bold ] << The right kind of abstraction
    .vspace[lines=4]
    .style [ fg = $lowlight ]
        .center << John Cinnamond
        .nl
        .center << GopherCon UK 2025

.slide
    .vcenter
        .quote [citation = "someone on r/golang" ; altColor = $lowlight]
            Go's philosophy emphasizes avoiding 
            unnecessary abstractions
    .wait

    .vcenter
        .quote [citation = "someone on r/golang" ; altColor = $lowlight]
            Go's philosophy emphasizes avoiding 
            .style [fg=$highlight ; bold ] << "unnecessary " < .style[fg=$fg] << abstractions
    .wait

    .vspace [lines=3]
    .center
        What does 
        .style [fg=$highlight] << unnecessary 
        mean here?

.slide
    .vcenter
        .quote [citation = "nobody, ever" ; altColor = #999999]
            I'm going to use unnecessary abstractions

.slide
    .vcenter
        What kind of abstractions are unnecessary?
        .vspace [lines=3]
        .wait
        

        .alternate
            Java Spring
            ORMs

.slide
    What about map/reduce?
    .home
    .wait
    .style[fg=$lowlight] << What about map/reduce?
    .vspace [lines=3]

    .style[fg=$code]
        .type [delay=25ms]
            > names := []string{}
            > for _, u := range users {
            >     names = append(names, u.Name)
            > }
            .wait
            .nl
            > ids := []uuid.UUID{}
            > for _, u := range users {
            >     ids = append(ids, u.ID)   
            > }

    .wait
    .home 
    .style[fg=$lowlight]
        .moveTo[y=3; x=0] < names
        .moveTo[y=5; x=4] < names
        .moveTo[x=19] < names
        .moveTo[y=8;x=0] < ids
        .moveTo[y=10;x=4] < ids
        .moveTo[y=10;x=17] < ids
    .style[fg=$highlight] 
        .moveTo[y=3; x=11] < string
        .moveTo[y=5; x=26] < u.Name
        .moveTo[y=8; x=9] < uuid.UUID
        .moveTo[y=10; x=22] < u.ID

.slide
    .style[fg=$lowlight] << What about map/reduce?
    .vspace [lines=5]

    .style[fg=$code]
        .type [delay=25ms]
            > func extract[A any] (fn func(User) A, users []User) []A {
            .wait
            .style[fg=$highlight]
                .moveTo [y=5; x=21] < fn func(User) A
                .moveTo [x=54] < A
            .nl
            .wait
            >     out := []A{}
            >     for _, u := range users {
            >         out = append(out, fn(u))
            >     }
            >     return out
            > }
            .wait
            .style[fg=$highlight]
                .moveTo [y=6;x=13] < A
                .moveTo [y=8;x=26] < fn(u)
            .wait
            .moveTo [y=13]
            ids := extract(func(u User) string { u.ID }, users)

.slide
    .vcenter
        What kind of abstractions are unnecessary?
        .vspace [lines=3]

        .alternate
            map/reduce
            generics
            interfaces?

.slide
    .vcenter
        .style[fg=$code]
            > func parseBody(r io.Reader) {
            >     bytes, err := io.ReadAll(r)
            >     // ...
            > }

.slide
    .vcenter
        .style[fg=$code]
            > func parseFileBody(f os.File) {
            >     var bytes := make([]byte, 1024)
            >     n, err := f.Read(&b)
            >     // ...
            > }
            .nl < .nl
            > func parseBytesBody(b []byte) {
            >     // ...
            > }

.slide
    .vcenter
        What kind of abstractions are unnecessary?
        .vspace [lines=3]

        .alternate
            interfaces
            functions?
            assembler?
            machine code?

.slide
    .vcenter
        .center
            > Programming without abstractions
            > is just screaming electrical impluses
            > into silicon wafers

.slide
    .vcenter
        .center
            This is obviously absurd

.slide
    .vcenter
        .style[fg=$lowlight] 
            > Go's philosophy emphasizes avoiding 
            unnecessary abstractions

    .vspace[lines=3]
    > unnecessary != technically possible to 
    > program without them

.slide
    .vcenter
        > Go's philosophy emphasizes avoiding
        unnecessary abstractions
        .wait
        .moveTo[x=24]
        .backspace << unnecessary abstractions
        .type << inappropriate abstractions

.slide
    .vcenter
        so...
        .nl
        what is an 
        .style[fg=$highlight] << inappropriate 
        abstraction?

        .wait
        .vspace[lines=3]
        it depends who you ask

        .wait
        .vspace[lines=3]
        > Appropriate abstractions are ones that I write.
        > It's other people's abstractions that are the problem.

.slide
    .vcenter
        The 
        .style[bold] << appropriateness 
        of abstractions
        .nl
        is subjective
        .nl
        and contextual

        .wait
        .vspace[lines=3]
        But it's not arbitrary
        
        .wait
        .vspace[lines=3]
        It's not like asking "what is your favourite color?"

.slide
    .vcenter
        .quote[altColor=$lowlight]
            Maybe I can't define a bad abstraction...
            
            .wait
            But I know it when I see it

.slide
    .vcenter
        > In general, there are a bunch of abstractions 
        > that we can all agree are "bad"

        .wait
        .vspace[lines=2]
        > ...and a bunch of abstractions
        > that we can all agree are "good"

        .wait
        .vspace[lines=2]
        > ...and an awkward bunch in the middle
        > where we don't agree

.slide
    .vcenter
        >Which of these awkward abstractions are 
        .type << .style[fg=$highlight] << appropraite?

        .wait
        .vspace[lines=3]
        > I can't answer that.
        .wait
        .style[fg=$lowlight] << (soz)

.slide
    .vcenter
        .center << .style[fg=$lowlight] << but all is not lost!
        
        .wait
        .vspace[lines=3]
        .center << "\"good\" and \"bad\" have meaning"
        .nl
        .center << when talking about abstractions
        
        .wait
        .vspace[lines=3]
        .center << "... it's just a bit hard to explain"

.slide
    .vcenter
        .center << This talk is about learning how
        .nl
        .center << to articulate that meaning